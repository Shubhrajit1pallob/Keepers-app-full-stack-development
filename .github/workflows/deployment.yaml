name: CI/CD with Terraform
on:
    push:
        branches:
            - main
env:
    AWS_REGION: us-east-1
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    AWS_SSH_KEY_PRIVATE: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
    AWS_SSH_KEY_PUBLIC: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
    AWS_TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
    AWS_RDS_USERNAME: ${{ secrets.AWS_RDS_USERNAME }}
    AWS_RDS_PASSWORD: ${{ secrets.AWS_RDS_PASSWORD }}

jobs:
    deploy-infra:
        runs-on: ubuntu-latest
        outputs:
            ele_instance_ip: ${{ steps.instance_elastic_ip.outputs.ip }}
            s3_bucket_name: ${{ steps.s3_bucket_name.outputs.s3_bucket_name }}
            rds_instance_endpoint: ${{ steps.rds_endpoint.outputs.rds_endpoint }}
            rds_instance_port: ${{ steps.rds_instance_port.outputs.rds_instance_port }}
            rds_instance_name: ${{ steps.rds_instance_name.outputs.rds_instance_name }}
            

        steps:
            - name: Checkout code
              uses: actions/checkout@v2
            
            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v1
              with:
                terraform_wrapper: false
                # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}. # This is optional if you are not using Terraform Cloud or Enterprise

            - name: Initialize Terraform
              id: init
              run: terraform init
              working-directory: ./Terraform
            
            - name: Terraform Plan
              id: plan
              run: |-
                terraform plan \
                -var "public_key=$AWS_SSH_KEY_PUBLIC" \
                -var "private_key=$AWS_SSH_KEY_PRIVATE" \
                -var "db_username=$AWS_RDS_USERNAME" \
                -var "db_password=$AWS_RDS_PASSWORD" \
                -out=PLAN
              working-directory: ./Terraform

            # - name: Create necessary Terraform Infrastructure
            #   run: terraform apply -target=aws_security_group.db -target=aws_vpc_security_group_ingress_rule.db -target=aws_vpc_security_group_egress_rule.db -target=aws_subnet.private1 -target=aws_subnet.private2  -target=aws_subnet.public -var "public_key=$AWS_SSH_KEY_PUBLIC" -var "private_key=$AWS_SSH_KEY_PRIVATE" -var "db_username=$AWS_RDS_USERNAME" -var "db_password=$AWS_RDS_PASSWORD" -auto-approve
            #   working-directory: ./Terraform

            - name: Apply Terraform configuration
              run: terraform apply PLAN
              working-directory: ./Terraform

            - name: Instance Elastic IP
              id: instance_elastic_ip
              run: |-
                echo "ip=$(terraform output -raw instance_elastic_ip)" >> $GITHUB_OUTPUT
                echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
              working-directory: ./Terraform

            - name: S3 Bucket Name
              id: s3_bucket_name
              run: echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
              working-directory: ./Terraform
            
            - name: Get RDS Endpoint
              id: rds_endpoint
              run: echo "rds_endpoint=$(terraform output -raw rds_instance_endpoint)" >> $GITHUB_OUTPUT
              working-directory: ./Terraform

            - name: Get RDS DB Port
              id: rds_instance_port
              run: echo "rds_instance_port=$(terraform output -raw rds_instance_port)" >> $GITHUB_OUTPUT
              working-directory: ./Terraform

            - name: Get RDS DB Name
              id: rds_instance_name
              run: echo "rds_instance_name=$(terraform output -raw rds_instance_name)" >> $GITHUB_OUTPUT
              working-directory: ./Terraform

    build-react-app:
      runs-on: ubuntu-latest
      needs: deploy-infra
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '14'

        - name: Install dependencies
          run: npm install
          working-directory: ./my-react-app

        - name: Set up API URL env variable
          run: echo "VITE_API_URL=http://${{ needs.deploy-infra.outputs.ele_instance_ip }}:8888" >> $GITHUB_ENV
          working-directory: ./my-react-app

        - name: Build React app
          run: npm run build
          working-directory: ./my-react-app

        - name: Upload build files to S3
          run: aws s3 sync ./my-react-app/dist s3://${{ needs.deploy-infra.outputs.s3_bucket_name }}/
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: us-east-1

    deploy-app:
        runs-on: ubuntu-latest
        needs: deploy-infra
        steps: 
            - name: Checkout
              uses: actions/checkout@v2

            - name: Set IP env Variable
              run: echo "INSTANCE_IP=${{ needs.deploy-infra.outputs.ele_instance_ip }}" >> $GITHUB_ENV

            - name: Login to AWS ECR
              id: ecr-login
              uses: aws-actions/amazon-ecr-login@v1

            - name: Create ECR repository if not exists
              env:
                AWS_DEFAULT_REGION: us-east-1
                REPOSITORY: sample-devops-project
              run: |
                aws ecr describe-repositories --repository-names "$REPOSITORY" --region "$AWS_DEFAULT_REGION" || \
                aws ecr create-repository --repository-name "$REPOSITORY" --region "$AWS_DEFAULT_REGION"
            
            - name: Build And Push Docker Image
              env:
                REGISTRY: ${{ steps.ecr-login.outputs.registry }}
                REPOSITORY: sample-devops-project
                IMAGE_TAG: ${{ github.sha }}
                AWS_DEFAULT_REGION: us-east-1
              run: |-
                docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
                docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
              working-directory: ./nodeapp
            - name: Deploy Docker Image to EC2 Instance
              env: 
                REGISTRY: ${{ steps.ecr-login.outputs.registry }}
                REPOSITORY: sample-devops-project
                IMAGE_TAG: ${{ github.sha }}
                AWS_DEFAULT_REGION: us-east-1
              uses: appleboy/ssh-action@master
              with:
                host: ${{ env.INSTANCE_IP }}
                username: ubuntu
                key: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
                envs: AWS_SSH_KEY_PRIVATE,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_DEFAULT_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION,AWS_SSH_KEY_PUBLIC,AWS_TF_STATE_BUCKET_NAME
                script: |-
                    sudo apt update -y
                    sudo apt install docker.io -y
                    sudo apt install awscli -y
                    sudo $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
                    sudo docker stop myapp || true
                    sudo docker rm myapp || true
                    sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
                    sudo docker run -d --name myapp \
                     -p 80:3000 \
                     -e DB_HOST=$RDS_INSTANCE_ENDPOINT \
                     -e DB_PORT=$RDS_INSTANCE_PORT \
                     -e DB_NAME=$RDS_INSTANCE_NAME \
                     -e DB_USER=$RDS_INSTANCE_USERNAME \
                     -e DB_PASS=$RDS_INSTANCE_PASSWORD \
                     $REGISTRY/$REPOSITORY:$IMAGE_TAG
                    sudo docker ps -a

